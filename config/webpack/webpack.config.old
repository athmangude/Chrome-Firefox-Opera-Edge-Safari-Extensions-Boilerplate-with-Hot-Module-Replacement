const webpack = require('webpack');
const helpers = require('../helpers');
const CleanPlugin = require('clean-webpack-plugin');
const CopyPlugin = require('copy-webpack-plugin');
const HtmlPlugin = require('html-webpack-plugin');
const WriteFilePlugin = require('write-file-webpack-plugin');
const esprima = require('esprima');
const { root, removeEmpty, ifProd } = helpers;

module.exports = (options) => {
  const ENV = process.env.ENV = process.env.NODE_ENV = options.env;
  const manifestMode = (ENV.toLowerCase() === 'development') ? ENV.toLowerCase() : 'production';
  const BROWSER = options.browser;

  console.log(ENV);

  const config = {
    resolve: {
      extensions: ['.jsx', '.js'],
      modules: [root('src'), 'node_modules'],
      alias: {
        react: root('./node_modules/react'),
        React: root('./node_modules/react')
      }
    },
    entry: {
      'gmail/gmail': './src/main.js',
      'background/background': './src/extension/background/background.js',
      'bookmark/popup': './src/extension/bookmark/popup.jsx',
      vendors: ['react', 'react-dom']
    },
    output: {
      path: root(`${ENV === 'development' ? 'dist' : 'build/' + BROWSER}`),
      publicPath:"https://localhost:3000/",
      filename: '[name].js',
      // publicPath: '/assets/',
    },
    devServer: {
      historyApiFallback: true,
      inline:             true,
      port: 3000,
      headers: { "Access-Control-Allow-Origin": "*" },
      clientLogLevel: "info",
      proxy: {
        '*': {
          target: 'https://localhost:3000',
          secure: true,
        },
      }
    },
    devtool: 'eval-source-map',
    module: {
      rules: [
        {
          test: /.jsx?$/,
          loader: 'babel-loader',
          exclude: /node_modules/,
          query: {
            presets: ['es2015', 'stage-2', 'react'],
          },
        },
        // {
        //   test: /.jsx?$/,
        //   loader: './loader'
        // }
      ],
    },
    performance: {
      hints: false,
    },
    plugins: removeEmpty([
      new webpack.DefinePlugin({
        ENV: JSON.stringify(ENV),
      }),
      new CleanPlugin([BROWSER], {
        root: root('build'),
        verbose: true,
      }),
      new webpack.optimize.CommonsChunkPlugin({
        name: ['vendors','commons'],
      }),
      new CopyPlugin([
        { from: 'src/extension/background', to: 'background' },
        { from: 'src/extension/images', to: 'images' },
      ]),
      new HtmlPlugin({
        chunks: ['bookmark/popup', 'commons', 'vendors'],
        filename: 'bookmark/popup.html',
        template: 'src/extension/bookmark/popup.html'
      }),
      new HtmlPlugin({
        chunks: ['background/background', 'commons'],
        filename: 'background/background.html',
        inject: 'head',
        title: 'Background'
      }),
      new WriteFilePlugin(),
      ifProd(new webpack.LoaderOptionsPlugin({
        minimize: true,
        debug: false,
      })),
      ifProd(new webpack.optimize.UglifyJsPlugin({
        compress: {
          screw_ie8: true,
          warnings: false,
        }
      })),
    ]),
  };

  Object.defineProperty(config.devServer, "outputPath", {
    // make it non-enumerable so webpack can't complain about the schema
    enumerable: false,
    // change to your output path
    value: 'https://localhost:3000/'
  });

    return config;
};
